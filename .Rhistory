potentialYieldsArnsbergCounts$area = (potentialYieldsArnsbergCounts$pixelCount*10000)/1000000
potentialYieldsDetmoldCounts$area = (potentialYieldsDetmoldCounts$pixelCount*10000)/1000000
potentialYieldsDetmoldCounts$area = (potentialYieldsDetmoldCounts$pixelCount*10000)/1000000
potentialYieldsKölnCounts$area = (potentialYieldsKölnCounts$pixelCount*10000)/1000000
potentialYieldsDetmoldCounts$area = (potentialYieldsDetmoldCounts$pixelCount*10000)/1000000
potentialYieldsKölnCounts$area = (potentialYieldsKölnCounts$pixelCount*10000)/1000000
potentialYieldsDüsseldorfCounts$area = (potentialYieldsDüsseldorfCounts$pixelCount*10000)/1000000
potentialYieldsDüsseldorfCounts$area = (potentialYieldsDüsseldorfCounts$pixelCount*10000)/1000000
potentialYieldsMünsterCounts$area = (potentialYieldsMünsterCounts$pixelCount*10000)/1000000
#merge turbine counts per yield and pixel counts per yield
potentialYieldsArnsbergCounts <- merge(turbinesWithYieldsArnsbergFreq, potentialYieldsArnsbergCounts,
by.x = "potentialYield", by.y = "potentialYield")
potentialYieldsDetmoldCounts <- merge(turbinesWithYieldsDetmoldFreq, potentialYieldsDetmoldCounts,
by.x = "potentialYield", by.y = "potentialYield")
potentialYieldsKölnCounts <- merge(turbinesWithYieldsKölnFreq, potentialYieldsKölnCounts,
by.x = "potentialYield", by.y = "potentialYield")
potentialYieldsDüsseldorfCounts <- merge(turbinesWithYieldsDüsseldorfFreq, potentialYieldsDüsseldorfCounts,
by.x = "potentialYield", by.y = "potentialYield")
potentialYieldsMünsterCounts <- merge(turbinesWithYieldsMünsterFreq, potentialYieldsMünsterCounts,
by.x = "potentialYield", by.y = "potentialYield")
potentialYieldsArnsbergCounts$density = potentialYieldsArnsbergCounts$turbineCount/potentialYieldsArnsbergCounts$area
potentialYieldsDetmoldCounts$density = potentialYieldsDetmoldCounts$turbineCount/potentialYieldsDetmoldCounts$area
potentialYieldsKölnCounts$density = potentialYieldsKölnCounts$turbineCount/potentialYieldsKölnCounts$area
potentialYieldsDüsseldorfCounts$density = potentialYieldsDüsseldorfCounts$turbineCount/potentialYieldsDüsseldorfCounts$area
potentialYieldsMünsterCounts$density = potentialYieldsMünsterCounts$turbineCount/potentialYieldsMünsterCounts$area
#possible yields
yields <- c("1", "2", "3", "4", "5", "6", "7")
correlationArnsberg <- cor(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, method = 'pearson')
correlationArnsberg <- cor(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, method = 'pearson')
correlationDetmold <- cor(potentialYieldsDetmoldCounts$potentialYield, potentialYieldsDetmoldCounts$turbineCount, method = 'pearson')
correlationKöln <- cor(potentialYieldsKölnCounts$potentialYield, potentialYieldsKölnCounts$turbineCount, method = 'pearson')
correlationDüsseldorf <- cor(potentialYieldsDüsseldorfCounts$potentialYield, potentialYieldsDüsseldorfCounts$turbineCount, method = 'pearson')
correlationMünster <- cor(potentialYieldsMünsterCounts$potentialYield, potentialYieldsMünsterCounts$turbineCount, method = 'pearson')
plot(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, pch = 3, col = "red")
abline(lm(potentialYieldsArnsbergCounts$turbineCount ~ potentialYieldsArnsbergCounts$potentialYield), col = "red", lwd = 3)
text(paste("Correlation:", round(cor(potentialYieldsArnsbergCounts$potentialYield, y), potentialYieldsArnsbergCounts$turbineCount)), x = 25, y = 95)
plot(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, pch = 3, col = "red")
abline(lm(potentialYieldsArnsbergCounts$turbineCount ~ potentialYieldsArnsbergCounts$potentialYield), col = "red", lwd = 3)
text(paste("Correlation:", round(cor(potentialYieldsArnsbergCounts$potentialYield, y), potentialYieldsArnsbergCounts$turbineCount)), x = 25, y = 95)
plot(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield, pch = 3, col = "red")
abline(lm(potentialYieldsArnsbergCounts$potentialYield ~ potentialYieldsArnsbergCounts$turbineCount), col = "red", lwd = 3)
text(paste("Correlation:", cor(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield), potentialYieldsArnsbergCounts$turbineCount), add=TRUE)
plot(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield, pch = 3, col = "red")
abline(lm(potentialYieldsArnsbergCounts$potentialYield ~ potentialYieldsArnsbergCounts$turbineCount), col = "red", lwd = 3)
text("Correlation:", cor(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield), add=TRUE)
plot(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield, pch = 3, col = "red")
abline(lm(potentialYieldsArnsbergCounts$potentialYield ~ potentialYieldsArnsbergCounts$turbineCount), col = "blue", lwd = 3)
text("Correlation:", cor(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield), add=TRUE)
cor.testpotentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, method = "pearson")
cor.test(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, method = "pearson")
correlationArnsberg <- cor(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$density, method = 'pearson')
cor.test(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$density, method = "pearson")
plot(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$density, pch = 3, col = "red")
abline(lm(potentialYieldsArnsbergCounts$density ~ potentialYieldsArnsbergCounts$turbineCount), col = "blue", lwd = 3)
text("Correlation:", cor(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$density), add=TRUE)
correlationArnsberg <- cor(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, method = 'pearson')
cor.test(potentialYieldsArnsbergCounts$potentialYield, potentialYieldsArnsbergCounts$turbineCount, method = "pearson")
cor.test(potentialYieldsDetmoldCounts$potentialYield, potentialYieldsDetmoldCounts$turbineCount, method = "pearson")
correlationKöln <- cor(potentialYieldsKölnCounts$potentialYield, potentialYieldsKölnCounts$turbineCount, method = 'pearson')
cor.test(potentialYieldsKölnCounts$potentialYield, potentialYieldsKölnCounts$turbineCount, method = "pearson")
correlationDüsseldorf <- cor(potentialYieldsDüsseldorfCounts$potentialYield, potentialYieldsDüsseldorfCounts$turbineCount, method = 'pearson')
cor.test(potentialYieldsDüsseldorfCounts$potentialYield, potentialYieldsDüsseldorfCounts$turbineCount, method = "pearson")
correlationMünster <- cor(potentialYieldsMünsterCounts$potentialYield, potentialYieldsMünsterCounts$turbineCount, method = 'pearson')
cor.test(potentialYieldsMünsterCounts$potentialYield, potentialYieldsMünsterCounts$turbineCount, method = "pearson")
plot(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield, pch = 3, col = "red")
abline(lm(potentialYieldsArnsbergCounts$potentialYield ~ potentialYieldsArnsbergCounts$turbineCount), col = "blue", lwd = 3)
text("Correlation:", cor(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield), add=TRUE)
plot(potentialYieldsArnsbergCounts$turbineCount, potentialYieldsArnsbergCounts$potentialYield, pch = 3, col = "red", main="Correlation between potential energy yields and turbine counts", sub = "Fig. ")
abline(lm(potentialYieldsArnsbergCounts$potentialYield ~ potentialYieldsArnsbergCounts$turbineCount), col = "blue", lwd = 3)
plot(potentialYieldsDetmoldCounts$turbineCount, potentialYieldsDetmoldCounts$potentialYield, pch = 3, col = "red", main="Correlation between potential yields and turbine counts - Detmold", sub = "Fig. ")
abline(lm(potentialYieldsDetmoldCounts$potentialYield ~ potentialYieldsDetmoldCounts$turbineCount), col = "blue", lwd = 3)
plot(potentialYieldsKölnCounts$turbineCount, potentialYieldsKölnCounts$potentialYield, pch = 3, col = "red", main="Correlation between potential yields and turbine counts - Köln", sub = "Fig. ")
abline(lm(potentialYieldsKölnCounts$potentialYield ~ potentialYieldsKölnCounts$turbineCount), col = "blue", lwd = 3)
plot(potentialYieldsDüsseldorfCounts$turbineCount, potentialYieldsDüsseldorfCounts$potentialYield, pch = 3, col = "red", main="Correlation between potential yields and turbine counts - Düsseldorf", sub = "Fig. ")
abline(lm(potentialYieldsDüsseldorfCounts$potentialYield ~ potentialYieldsDüsseldorfCounts$turbineCount), col = "blue", lwd = 3)
plot(potentialYieldsMünsterCounts$turbineCount, potentialYieldsMünsterCounts$potentialYield, pch = 3, col = "red", main="Correlation between potential yields and turbine counts - Münster", sub = "Fig. ")
abline(lm(potentialYieldsMünsterCounts$potentialYield ~ potentialYieldsMünsterCounts$turbineCount), col = "blue", lwd = 3)
potentialYieldsKölnCounts
turbinesWithYieldsArnsberg
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
barplot(potentialYieldsMünsterCounts$density, main = "Local wind turbine densities - Münster", xlab = "Potential yield", ylab = "Wind turbine density", names.arg = potentialYieldsMünsterCounts$potentialYield, sub = "Fig.")
barplot(potentialYieldsMünsterCounts$density, main = "Local wind turbine densities - Münster", xlab = "Potential yield", ylab = "Wind turbine density", names.arg = potentialYieldsMünsterCounts$potentialYield, sub = "Fig.")
```
rho <- rhohat(pppArnsberg, potentialYieldsArnsbergMasked,  method="ratio")
library(spatstat)
#import libraries
library(sf)
#import libraries
library(sf)
library(raster)
library(spatstat)
library(plyr)
rho <- rhohat(pppArnsberg, potentialYieldsArnsbergMasked,  method="ratio")
View(potentialYieldsArnsergMasked)
rho <- rhohat(pppArnsberg, as.im(potentialYieldsArnsbergMasked),  method="ratio")
library(maptools)
install.packages("maptools")
library(maptools)
rho <- rhohat(pppArnsberg, as.im.RasterLayer(potentialYieldsArnsbergMasked),  method="ratio")
plot(rho, las=1, main=NULL, legendargs=list(cex=0.8, xpd=TRUE, inset=c(1.01, 0) ))
plot(rho)
rhoArnsberg <- rhohat(rescale(pppArnsberg, 1000, "km"),  rescale(as.im.RasterLayer(potentialYieldsArnsbergMasked),  method="ratio"), 1000, "km")
rhoArnsberg <- rhohat(rescale(pppArnsberg, 1000, "km"),  rescale(as.im.RasterLayer(potentialYieldsArnsbergMasked), 1000, "km"), method="ratio")
plot(rhoArnsberg)
rhoArnsberg <- rhohat(rescale(pppArnsberg, 1000, "km"),  rescale(as.im.RasterLayer(potentialYieldsArnsbergMasked), 1000, "km"), method="ratio")
pppArnsberg.km <- rescale(pppArnsberg, 1000, "km")
potentialYieldsArnsbergMasked.km <- rescale(as.im.RasterLayer(potentialYieldsArnsbergMasked), 1000, "km")
rhoArnsberg <- rhohat(pppArnsberg.km,  potentialYieldsArnsbergMasked.km, method="ratio")
plot(rhoArnsberg)
potentialYieldsArnsbergMasked.km.log <- rescale(potentialYieldsArnsbergMasked.km.lg, 1000, "km")
potentialYieldsArnsbergMasked.km.log <- rescale(log(potentialYieldsArnsbergMasked), 1000, "km")
rhoArnsberg <- rhohat(pppArnsberg.km,  log(potentialYieldsArnsbergMasked.km), method="ratio")
plot(rhoArnsberg)
pppArnsberg.km <- rescale(pppArnsberg, 1000, "km")
potentialYieldsArnsbergMasked.km <- rescale(as.im.RasterLayer(potentialYieldsArnsbergMasked), 1000, "km")
rhoArnsberg <- rhohat(pppArnsberg.km, potentialYieldsArnsbergMasked.km, method="ratio")
rhoArnsberg <- rhohat(pppArnsberg.km, potentialYieldsArnsbergMasked.km, method="ratio")
plot(rhoArnsberg)
predArnsberg <- predict(rhoArnsberg)
plot(predArnsberg)
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#import libraries
library(sf)
#import libraries
library(sf)
library(raster)
library(spatstat)
library(plyr)
library(raster)
library(spatstat)
library(plyr)
library(maptools)
pppArnsberg.rescaled <- rescale(pppArnsberg, 100, "rescaled")
rhoArnsberg <- rhohat(pppArnsberg.rescaled, as.im.RasterLayer(potentialYieldsArnsbergMasked), method="ratio", covname="potentialYield", confidence=0.95)
pppArnsberg.rescaled <- rescale(pppArnsberg, 100, "rescaled")
rhoArnsberg <- rhohat(pppArnsberg.rescaled, as.im.RasterLayer(potentialYieldsArnsbergMasked), method="ratio")
rhoArnsberg <- rhohat(pppArnsberg, as.im.RasterLayer(potentialYieldsArnsbergMasked), method="ratio")
plot(rhoArnsberg)
predArnsberg <- predict(rhoArnsberg)
plot(predArnsberg)
K1_vs_pred <- pairs(densityArnsberg, predArnsberg, plot = FALSE)
K1_vs_pred <- pairs(densityArnsberg, predArnsberg, plot = FALSE)
plot(K1_vs_pred$pred ~ K1_vs_pred$K1, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity",
col = rgb(0,0,0,0.1))
plot(K1_vs_pred$predArnsberg ~ K1_vs_pred$densityArnsberg, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity",
col = rgb(0,0,0,0.1))
K1_vs_pred <- pairs(densityArnsberg, predArnsberg, plot = FALSE)
K1_vs_pred <- pairs(densityArnsberg, predArnsberg, plot = FALSE)
plot(K1_vs_pred$predArnsberg ~ K1_vs_pred$densityArnsberg, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity")
K1_vs_pred <- pairs(densityArnsberg, predArnsberg, plot = FALSE)
plot(K1_vs_pred$predArnsberg ~ K1_vs_pred$densityArnsberg, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity")
abline(a=0, b = 1, col = "red")
brk  <- c(1,2,3,4,5,6,7)  # Define the breaks
Zcut <- cut(potentialYieldsArnsbergMasked, breaks=brk, labels=1:7)  # Classify the raster
brk  <- c(1,2,3,4,5,6,7)  # Define the breaks
Zcut <- cut(potentialYieldsArnsbergMasked, breaks=brk)  # Classify the raster
E    <- tess(image=Zcut)  # Create a tesselated surface
plot(E)
Q   <- quadratcount(pppArnsberg, tess = E)  # Tally counts
Q.d <- intensity(Q)  # Compute density
Q.d
plot(intensity(Q, image=TRUE), las=1, main=NULL)
hist(potentialYieldsArnsbergMasked)
covariant <-  rescale(potentialYieldsArnsbergMasked, 1000)
covariant <-  rescale(as.im.RasterLayer(potentialYieldsArnsbergMasked), 1000)
pppObj <- rescale(pppArnsberg, 1000)
rhoArnsberg <- rhohat(pppObj, covariant, method="ratio")
plot(rhoArnsberg)
predArnsberg <- predict(rhoArnsberg)
plot(predArnsberg)
dens <- density(pppObj)
dens <- density(pppObj)
K1_vs_pred <- pairs(dens, pred, plot = FALSE)
K1_vs_pred <- pairs(dens, predArnsberg, plot = FALSE)
plot(K1_vs_pred$predArnsberg ~ K1_vs_pred$dens, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity",
col = rgb(0,0,0,0.1))
abline(a=0, b = 1, col = "red")
plot(K1_vs_pred$predArnsberg ~ K1_vs_pred$dens, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity",
col = rgb(0,0,0,0.1))
abline(a=0, b = 1, col = "red")
hist(dens)
hist(log(dens))
K1_vs_pred <- pairs(log(dens), predArnsberg, plot = FALSE)
plot(K1_vs_pred$predArnsberg ~ K1_vs_pred$dens, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity",
col = rgb(0,0,0,0.1))
View(dens)
dens <- density(pppObj)
K1_vs_pred <- pairs(dens, predArnsberg, plot = FALSE)
plot(K1_vs_pred$dens ~ K1_vs_pred$predArnsberg, pch=20,
xlab = "Observed intensity",
ylab = "Predicted intensity",
col = rgb(0,0,0,0.1))
barplot(potentialYieldsMünsterCounts$density, main = "Local wind turbine densities - Münster", xlab = "Potential yield", ylab = "Wind turbine density", names.arg = potentialYieldsMünsterCounts$potentialYield, sub = "Fig.")
```
barplot(potentialYieldsMünsterCounts$density, main = "Local wind turbine densities - Münster", xlab = "Potential yield", ylab = "Wind turbine density", names.arg = potentialYieldsMünsterCounts$potentialYield, sub = "Fig.")
```
barplot(potentialYieldsMünsterCounts$density, main = "Local wind turbine densities - Münster", xlab = "Potential yield", ylab = "Wind turbine density", names.arg = potentialYieldsMünsterCounts$potentialYield, sub = "Fig.")
```
PPM1 <- ppm(pppArnsberg ~ potentialYieldsArnsbergMasked)
PPM1 <- ppm(pppArnsberg ~ as.im.RasterLayer(potentialYieldsArnsbergMasked))
PPM1 <- ppm(pppArnsberg ~ covariant)
covariant <- as.im.RasterLayer(potentialYieldsArnsbergMasked)
PPM1 <- ppm(pppArnsberg ~ covariant)
# Plot the relationship
plot(effectfun(PPM1, "pop.lg.km", se.fit=TRUE), main=NULL,
las=1, legendargs=list(cex=0.8, xpd=TRUE, inset=c(1.01, 0) ))
# Plot the relationship
plot(effectfun(PPM1, "covariant", se.fit=TRUE), main=NULL,
las=1, legendargs=list(cex=0.8, xpd=TRUE, inset=c(1.01, 0) ))
PPM1
plot(pred(PPM1))
pred(PPM1)
rhohat(PPM1, covariant, method="ratio")
test <- rhohat(PPM1, covariant, method="ratio")
plot(test)
plot(pred(test))
p<-pred(test)
p <- pred(predict(test)
p <- predict(test)
ptes <- predict(test)
print(pred)
plot(pred)
plot(ptes)
ppmMünsterCov
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
covariantArnsberg <- as.im.RasterLayer(potentialYieldsArnsbergMasked)
ppmArnsbergCov <- ppm(pppArnsberg ~ covariantArnsberg)
ppmArnsberg <- ppm(pppArnsberg ~ 1)
ppmArnsbergPred <- predict(ppmArnsbergCov)
ppmArnsbergCov <- ppm(pppArnsberg ~ covariantArnsberg)
#import libraries
library(sf)
#import libraries
library(sf)
library(raster)
library(spatstat)
library(plyr)
library(maptools)
covariantArnsberg <- as.im.RasterLayer(potentialYieldsArnsbergMasked)
ppmArnsbergCov <- ppm(pppArnsberg ~ covariantArnsberg)
ppmArnsbergPred <- predict(ppmArnsbergCov)
ppmArnsberg
ppmArnsberg <- ppm(pppArnsberg ~ 1)
ppmArnsberg
ppmArnsbergCov
ppmArnsbergCov <- ppm(pppArnsberg ~ log(covariantArnsberg))
ppmArnsberg <- ppm(pppArnsberg ~ 1)
ppmArnsbergPred <- predict(ppmArnsbergCov)
anova(ppmArnsberg, ppmArnsbergCov, test="LRT")
plot(potentialYieldsArnsbergMasked, sub = "Fig.", main = "Potential yields - Arnsberg")
plot(st_geometry(windTurbinesArnsberg), pch = 3, col = 'black', add = TRUE)
plot(potentialYieldsArnsbergMasked, sub = "Fig.", main = "Potential yields - Arnsberg", zlim = c(1, 7))
plot(potentialYieldsKölnMasked, sub = "Fig. ", main = "Potential yields - Köln", zlim = c(1, 7))
plot(potentialYieldsMünsterMasked, sub = "Fig. ", main = "Potential yields - Münster", zlim = c(1, 7))
localDensityDüsseldorf
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#import libraries
library(sf)
library(raster)
library(raster)
library(spatstat)
library(plyr)
library(maptools)
#import precincts
precincts <- st_read("data/dvg2_EPSG25832_Shape/dvg2rbz_nw.shp")
#union precincts
precinctsUnion <- st_union(precincts)
summary(precincts)
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
summary(windTurbines)
#import potential yields
potentialYields <- raster("data/Energieleistungsdichte-100m_EPSG25832_TIFF/en_100m_klas.tif")
#import potential yields
potentialYields <- raster("data/Energieleistungsdichte-100m_EPSG25832_TIFF/en_100m_klas.tif")
summary(potentialYields)
yields <- c("1", "2", "3", "4", "5", "6", "7")
#create subset of wind turbines for each precinct
windTurbinesArnsberg <- st_intersection(windTurbines, precincts[precincts$GN == "Arnsberg",])
#create subset of wind turbines for each precinct
windTurbinesArnsberg <- st_intersection(windTurbines, precincts[precincts$GN == "Arnsberg",])
windTurbinesDetmold <- st_intersection(windTurbines, precincts[precincts$GN == "Detmold",])
windTurbinesKöln <- st_intersection(windTurbines, precincts[precincts$GN == "Köln",])
windTurbinesKöln <- st_intersection(windTurbines, precincts[precincts$GN == "Köln",])
windTurbinesDüsseldorf <- st_intersection(windTurbines, precincts[precincts$GN == "Düsseldorf",])
windTurbinesKöln <- st_intersection(windTurbines, precincts[precincts$GN == "Köln",])
windTurbinesDüsseldorf <- st_intersection(windTurbines, precincts[precincts$GN == "Düsseldorf",])
windTurbinesMünster <- st_intersection(windTurbines, precincts[precincts$GN == "Münster",])
windTurbinesDüsseldorf <- st_intersection(windTurbines, precincts[precincts$GN == "Düsseldorf",])
windTurbinesMünster <- st_intersection(windTurbines, precincts[precincts$GN == "Münster",])
#create planar point patterns from wind turbine subsets
pppArnsberg <- as.ppp(c(st_geometry(precincts[precincts$GN == "Arnsberg",]), st_geometry(windTurbinesArnsberg)))
#create planar point patterns from wind turbine subsets
pppArnsberg <- as.ppp(c(st_geometry(precincts[precincts$GN == "Arnsberg",]), st_geometry(windTurbinesArnsberg)))
pppDetmold <- as.ppp(c(st_geometry(precincts[precincts$GN == "Detmold",]), st_geometry(windTurbinesDetmold)))
pppDetmold <- as.ppp(c(st_geometry(precincts[precincts$GN == "Detmold",]), st_geometry(windTurbinesDetmold)))
pppKöln <- as.ppp(c(st_geometry(precincts[precincts$GN == "Köln",]), st_geometry(windTurbinesKöln)))
pppDüsseldorf <- as.ppp(c(st_geometry(precincts[precincts$GN == "Düsseldorf",]), st_geometry(windTurbinesDüsseldorf)))
pppDüsseldorf <- as.ppp(c(st_geometry(precincts[precincts$GN == "Düsseldorf",]), st_geometry(windTurbinesDüsseldorf)))
pppMünster <- as.ppp(c(st_geometry(precincts[precincts$GN == "Münster",]), st_geometry(windTurbinesMünster)))
pppDüsseldorf <- as.ppp(c(st_geometry(precincts[precincts$GN == "Düsseldorf",]), st_geometry(windTurbinesDüsseldorf)))
pppMünster <- as.ppp(c(st_geometry(precincts[precincts$GN == "Münster",]), st_geometry(windTurbinesMünster)))
precintNames <- c("Arnsberg", "Detmold", "Köln", "Düsseldorf", "Münster")
precintNames <- c("Arnsberg", "Detmold", "Köln", "Düsseldorf", "Münster")
windTurbineCounts <- c(pppArnsberg$n, pppDetmold$n, pppKöln$n, pppDüsseldorf$n, pppMünster$n)
precintNames <- c("Arnsberg", "Detmold", "Köln", "Düsseldorf", "Münster")
windTurbineCounts <- c(pppArnsberg$n, pppDetmold$n, pppKöln$n, pppDüsseldorf$n, pppMünster$n)
windTurbineDensities <- c(pppArnsberg$n/(as.numeric(st_area(precincts[precincts$GN == "Arnsberg",]))/1000000),
pppDetmold$n/(as.numeric(st_area(precincts[precincts$GN == "Detmold",]))/1000000),
pppKöln$n/(as.numeric(st_area(precincts[precincts$GN == "Köln",]))/1000000),
pppDüsseldorf$n/(as.numeric(st_area(precincts[precincts$GN == "Düsseldorf",]))/1000000),
pppMünster$n/(as.numeric(st_area(precincts[precincts$GN == "Münster",]))/1000000))
precintNames <- c("Arnsberg", "Detmold", "Köln", "Düsseldorf", "Münster")
windTurbineCounts <- c(pppArnsberg$n, pppDetmold$n, pppKöln$n, pppDüsseldorf$n, pppMünster$n)
windTurbineDensities <- c(pppArnsberg$n/(as.numeric(st_area(precincts[precincts$GN == "Arnsberg",]))/1000000),
pppDetmold$n/(as.numeric(st_area(precincts[precincts$GN == "Detmold",]))/1000000),
pppKöln$n/(as.numeric(st_area(precincts[precincts$GN == "Köln",]))/1000000),
pppDüsseldorf$n/(as.numeric(st_area(precincts[precincts$GN == "Düsseldorf",]))/1000000),
pppMünster$n/(as.numeric(st_area(precincts[precincts$GN == "Münster",]))/1000000))
precintAreas <- c(as.numeric(st_area(precincts[precincts$GN == "Arnsberg",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Detmold",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Köln",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Düsseldorf",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Münster",]))/1000000)
pppMünster <- as.ppp(c(st_geometry(precincts[precincts$GN == "Münster",]), st_geometry(windTurbinesMünster)))
precintNames <- c("Arnsberg", "Detmold", "Köln", "Düsseldorf", "Münster")
windTurbineCounts <- c(pppArnsberg$n, pppDetmold$n, pppKöln$n, pppDüsseldorf$n, pppMünster$n)
windTurbineDensities <- c(pppArnsberg$n/(as.numeric(st_area(precincts[precincts$GN == "Arnsberg",]))/1000000),
pppDetmold$n/(as.numeric(st_area(precincts[precincts$GN == "Detmold",]))/1000000),
pppKöln$n/(as.numeric(st_area(precincts[precincts$GN == "Köln",]))/1000000),
pppDüsseldorf$n/(as.numeric(st_area(precincts[precincts$GN == "Düsseldorf",]))/1000000),
pppMünster$n/(as.numeric(st_area(precincts[precincts$GN == "Münster",]))/1000000))
precintAreas <- c(as.numeric(st_area(precincts[precincts$GN == "Arnsberg",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Detmold",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Köln",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Düsseldorf",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Münster",]))/1000000)
precinctDf <- data.frame(precintNames, precintAreas, windTurbineCounts, windTurbineDensities)
pppKöln <- as.ppp(c(st_geometry(precincts[precincts$GN == "Köln",]), st_geometry(windTurbinesKöln)))
pppDüsseldorf <- as.ppp(c(st_geometry(precincts[precincts$GN == "Düsseldorf",]), st_geometry(windTurbinesDüsseldorf)))
pppMünster <- as.ppp(c(st_geometry(precincts[precincts$GN == "Münster",]), st_geometry(windTurbinesMünster)))
precintNames <- c("Arnsberg", "Detmold", "Köln", "Düsseldorf", "Münster")
windTurbineCounts <- c(pppArnsberg$n, pppDetmold$n, pppKöln$n, pppDüsseldorf$n, pppMünster$n)
windTurbineDensities <- c(pppArnsberg$n/(as.numeric(st_area(precincts[precincts$GN == "Arnsberg",]))/1000000),
pppDetmold$n/(as.numeric(st_area(precincts[precincts$GN == "Detmold",]))/1000000),
pppKöln$n/(as.numeric(st_area(precincts[precincts$GN == "Köln",]))/1000000),
pppDüsseldorf$n/(as.numeric(st_area(precincts[precincts$GN == "Düsseldorf",]))/1000000),
pppMünster$n/(as.numeric(st_area(precincts[precincts$GN == "Münster",]))/1000000))
precintAreas <- c(as.numeric(st_area(precincts[precincts$GN == "Arnsberg",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Detmold",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Köln",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Düsseldorf",]))/1000000,
as.numeric(st_area(precincts[precincts$GN == "Münster",]))/1000000)
precinctDf <- data.frame(precintNames, precintAreas, windTurbineCounts, windTurbineDensities)
colnames(precinctDf) <- c('Precinct','Area in km²','Turbine count', 'Turbine density')
#compute densities of wind turbines for each precinct
densityArnsberg <- density(pppArnsberg, sigma = bw.diggle, diggle = TRUE, edge = TRUE)
#compute densities of wind turbines for each precinct
densityArnsberg <- density(pppArnsberg, sigma = bw.diggle, diggle = TRUE, edge = TRUE)
densityDetmold <- density(pppDetmold, sigma = bw.diggle, diggle = TRUE, edge = TRUE)
densityKöln <- density(pppKöln, sigma = bw.diggle, diggle = TRUE, edge = TRUE)
densityDüsseldorf <- density(pppDüsseldorf, sigma = bw.diggle, diggle = TRUE, edge = TRUE)
densityMünster <- density(pppMünster, sigma = bw.diggle, diggle = TRUE, edge = TRUE)
#compute G-, F- and J-function for precinct Arnsberg
gEnvArnsberg <- envelope(pppArnsberg, fun = Gest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
#compute G-, F- and J-function for precinct Arnsberg
gEnvArnsberg <- envelope(pppArnsberg, fun = Gest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
fEnvArnsberg <- envelope(pppArnsberg, fun = Fest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
jEnvArnsberg <- envelope(pppArnsberg, fun = Jest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
#compute G-, F- and J-function for precinct Detmold
gEnvDetmold <- envelope(pppDetmold, fun = Gest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
fEnvDetmold <- envelope(pppDetmold, fun = Fest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
jEnvDetmold <- envelope(pppDetmold, fun = Jest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
#compute G-, F- and J-function for precinct Arnsberg
gEnvKöln <- envelope(pppKöln, fun = Gest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
fEnvKöln <- envelope(pppKöln, fun = Fest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
jEnvKöln <- envelope(pppKöln, fun = Jest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
#compute G-, F- and J-function for precinct Arnsberg
gEnvDüsseldorf <- envelope(pppDüsseldorf, fun = Gest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
fEnvDüsseldorf <- envelope(pppDüsseldorf, fun = Fest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
jEnvDüsseldorf <- envelope(pppDüsseldorf, fun = Jest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
#compute G-, F- and J-function for precinct Arnsberg
gEnvMünster <- envelope(pppMünster, fun = Gest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
fEnvMünster <- envelope(pppMünster, fun = Fest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
jEnvMünster <- envelope(pppMünster, fun = Jest, nsim = 99, clipdata = TRUE, correction = "best", verbose = FALSE)
potentialYieldsArnsbergCropped <- crop(potentialYields, precincts[precincts$GN == "Arnsberg",])
potentialYieldsArnsbergMasked <- mask(potentialYieldsArnsbergCropped, precincts[precincts$GN == "Arnsberg",])
potentialYieldsDetmoldCropped <- crop(potentialYields, precincts[precincts$GN == "Detmold",])
potentialYieldsDetmoldCropped <- crop(potentialYields, precincts[precincts$GN == "Detmold",])
potentialYieldsDetmoldMasked <- mask(potentialYieldsDetmoldCropped, precincts[precincts$GN == "Detmold",])
potentialYieldsDetmoldCropped <- crop(potentialYields, precincts[precincts$GN == "Detmold",])
potentialYieldsDetmoldMasked <- mask(potentialYieldsDetmoldCropped, precincts[precincts$GN == "Detmold",])
potentialYieldsKölnCropped <- crop(potentialYields, precincts[precincts$GN == "Köln",])
potentialYieldsKölnMasked <- mask(potentialYieldsKölnCropped, precincts[precincts$GN == "Köln",])
potentialYieldsDetmoldMasked <- mask(potentialYieldsDetmoldCropped, precincts[precincts$GN == "Detmold",])
potentialYieldsKölnCropped <- crop(potentialYields, precincts[precincts$GN == "Köln",])
potentialYieldsKölnMasked <- mask(potentialYieldsKölnCropped, precincts[precincts$GN == "Köln",])
potentialYieldsDüsseldorfCropped <- crop(potentialYields, precincts[precincts$GN == "Düsseldorf",])
potentialYieldsKölnMasked <- mask(potentialYieldsKölnCropped, precincts[precincts$GN == "Köln",])
potentialYieldsDüsseldorfCropped <- crop(potentialYields, precincts[precincts$GN == "Düsseldorf",])
potentialYieldsDüsseldorfMasked <- mask(potentialYieldsDüsseldorfCropped, precincts[precincts$GN == "Düsseldorf",])
potentialYieldsDüsseldorfMasked <- mask(potentialYieldsDüsseldorfCropped, precincts[precincts$GN == "Düsseldorf",])
potentialYieldsMünsterCropped <- crop(potentialYields, precincts[precincts$GN == "Münster",])
potentialYieldsKölnCropped <- crop(potentialYields, precincts[precincts$GN == "Köln",])
potentialYieldsKölnMasked <- mask(potentialYieldsKölnCropped, precincts[precincts$GN == "Köln",])
potentialYieldsDüsseldorfCropped <- crop(potentialYields, precincts[precincts$GN == "Düsseldorf",])
potentialYieldsDüsseldorfMasked <- mask(potentialYieldsDüsseldorfCropped, precincts[precincts$GN == "Düsseldorf",])
potentialYieldsMünsterCropped <- crop(potentialYields, precincts[precincts$GN == "Münster",])
potentialYieldsMünsterMasked <- mask(potentialYieldsMünsterCropped, precincts[precincts$GN == "Münster",])
breaks <- c(1,2,3,4,5,6,7)
potentialYieldsArnsbergClassified <- cut(potentialYieldsArnsbergMasked, breaks=breaks)
tessellationArnsberg <- tess(image=potentialYieldsArnsbergClassified)
tessellationArnsberg <- tess(image=potentialYieldsArnsbergClassified)
localDensityArnsberg <- quadratcount(pppArnsberg, tess=tessellationArnsberg)
localDensityArnsberg.dens <- intensity(localDensityArnsberg)
localDensityArnsberg.dens <- intensity(localDensityArnsberg)
potentialYieldsDetmoldClassified <- cut(potentialYieldsDetmoldMasked, breaks=breaks)
tessellationDetmold <- tess(image=potentialYieldsDetmoldClassified)
localDensityDetmold <- quadratcount(pppDetmold, tess=tessellationDetmold)
localDensityDetmold <- quadratcount(pppDetmold, tess=tessellationDetmold)
localDensityDetmold.dens <- intensity(localDensityDetmold)
potentialYieldsKölnClassified <- cut(potentialYieldsKölnMasked, breaks=breaks)
tessellationKöln <- tess(image=potentialYieldsKölnClassified)
tessellationKöln <- tess(image=potentialYieldsKölnClassified)
localDensityKöln <- quadratcount(pppKöln, tess=tessellationKöln)
potentialYieldsKölnClassified <- cut(potentialYieldsKölnMasked, breaks=breaks)
tessellationKöln <- tess(image=potentialYieldsKölnClassified)
localDensityKöln <- quadratcount(pppKöln, tess=tessellationKöln)
localDensityKöln.dens <- intensity(localDensityKöln)
localDensityKöln.dens <- intensity(localDensityKöln)
potentialYieldsDüsseldorfClassified <- cut(potentialYieldsDüsseldorfMasked, breaks=breaks)
tessellationDüsseldorf <- tess(image=potentialYieldsDüsseldorfClassified)
localDensityDüsseldorf <- quadratcount(pppDüsseldorf, tess=tessellationDüsseldorf)
localDensityKöln.dens <- intensity(localDensityKöln)
potentialYieldsDüsseldorfClassified <- cut(potentialYieldsDüsseldorfMasked, breaks=breaks)
tessellationDüsseldorf <- tess(image=potentialYieldsDüsseldorfClassified)
localDensityDüsseldorf <- quadratcount(pppDüsseldorf, tess=tessellationDüsseldorf)
localDensityDüsseldorf.dens <- intensity(localDensityDüsseldorf)
potentialYieldsMünsterClassified <- cut(potentialYieldsMünsterMasked, breaks=breaks)
potentialYieldsMünsterClassified <- cut(potentialYieldsMünsterMasked, breaks=breaks)
tessellationMünster <- tess(image=potentialYieldsMünsterClassified)
localDensityMünster <- quadratcount(pppMünster, tess=tessellationArnsberg)
localDensityMünster.dens <- intensity(localDensityMünster)
localDensityMünster
plot(potentialYieldsArnsbergMasked, sub = "Fig.", main = "Potential yields - Arnsberg", zlim = c(1, 7))
barplot(localDensityArnsberg.dens, main = "Local wind turbine densities - Arnsberg", xlab = "Potential yield", ylab = "Wind turbine density", sub = "Fig.")
tessellationDüsseldorf <- tess(image=rescale(potentialYieldsDüsseldorfClassified, 1000))
tessellationDüsseldorf <- rescale(tess(image=potentialYieldsDüsseldorfClassified), 1000)
localDensityDüsseldorf.dens <- intensity.quadratcount(localDensityDüsseldorf)
plot(localDensityDüsseldorf)
localDensityMünster
show(localDensityMünster)
barplot(localDensityArnsberg.dens, main = "Local wind turbine densities - Arnsberg", xlab = "Potential yield", ylab = "Wind turbine density", sub = "Fig.")
potentialYieldsArnsbergClassified <- cut(rescale(potentialYieldsArnsbergMasked, 1000), breaks=breaks)
potentialYieldsArnsbergClassified <- cut(rescale(as.im.RasterLayer(potentialYieldsArnsbergMasked), 1000), breaks=breaks)
tessellationArnsberg <- tess(image=potentialYieldsArnsbergClassified)
localDensityArnsberg <- quadratcount(pppArnsberg, tess=tessellationArnsberg)
localDensityArnsberg.dens <- intensity(localDensityArnsberg)
plot(potentialYieldsArnsbergMasked, sub = "Fig.", main = "Potential yields - Arnsberg", zlim = c(1, 7))
plot(st_geometry(windTurbinesArnsberg), pch = 3, col = 'black', add = TRUE)
barplot(localDensityArnsberg.dens, main = "Local wind turbine densities - Arnsberg", xlab = "Potential yield", ylab = "Wind turbine density", sub = "Fig.")
plot(potentialYields, sub = "Fig. ", main = "Potential yields of NRW")
knitr::opts_chunk$set(echo = FALSE, message=FALSE, warning=FALSE)
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
summary(windTurbines)
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
summary(windTurbines)
setwd("~/GitHub/AnalysisOfSpatioTemporalData2022")
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
summary(windTurbines)
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
#import libraries
library(sf)
#import libraries
library(sf)
library(raster)
library(spatstat)
library(plyr)
library(maptools)
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
summary(windTurbines)
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
summary(windTurbines)
#import wind turbines
windTurbines <- st_read("data/OpenEE-Windenergie_EPSG25832_Shape/Windbetrieb_Standorte.shp")
summary(windTurbines)
